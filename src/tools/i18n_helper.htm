<!DOCTYPE HTML>
<html>
  <head>
    <title>I18N helper</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <script type="text/javascript" src="../jquery/jquery.min.js"></script>
    <style>
      #translateArea textarea {
        margin-left: 12px;
        border: 1px solid grey;
        width: 80%;
      }
      #translateArea b {
        line-height: 40px;
      }
      * {
        vertical-align: middle;
      }
      #translateArea i {
        margin-left: 12px;
      }
      [indent] {
        display: inline-block;
      }
      [indent='1'] {
        text-indent: 18px;
      }
      [indent='2'] {
        text-indent: 36px;
      }
      [indent='3'] {
        text-indent: 54px;
      }
      #exportArea {
        display: none;
      }
      #exportArea a {
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <h1>I18N helper for AdBlockforChrome</h1>
    <p id="languageselector">
      <b>Enter the language code or JSON file for the language you want to translate:</b>
      <input type="text" id="languagecode" />
      <input type="button" id="languagecodesubmit" value="Load" />
      <br/>
      <i>Example: 'nl' for Dutch, 'pt-pt' for portuguese, etcetera. If you leave it empty, an empty translation file will be created<br/>
      If you paste the content of the file you already have translated, it'll load that file instead</i><br/>
      <u>Please make sure that you already created an issue in the issue tracker before you start translating.</u><br/>
    </p>
    <div id="translateArea"></div>
    <div id="exportArea">
      <input type="button" id="exportButton" value="Export"/>
    </div>
    <script>
      var English = {}, i;
      //Load the English file
      $.ajax({
        url: "../_locales/en/messages.json",
        cache: false,
        success: function(text) {
          try {
            English = JSON.parse(text);
          } catch(ex) {}
        }
      });

      // Enter in language code field -> submit
      $('#languagecode').keypress(function(event) {
        if (event.keyCode === 13) {
          event.preventDefault();
          $('#languagecodesubmit').click();
        }
      });

      $("#languagecodesubmit").click(function() {
        var language = $("#languagecode").val().trim();
        language = language.match(/^(\w\w)([_\-]\w\w)?$/);
        if (language) {
          language = language[1].toLowerCase() + (language[2]||"").toUpperCase().replace('-', '_');
          $.ajax({
            url: "../_locales/" + language + "/messages.json",
            cache: false,
            success: function(text) {
              var JSONtext;
              try {
                JSONtext = JSON.parse(text);
              } catch(ex) {
                alert("The file could not be parsed. An empty file will be loaded instead");
              }
              continueBelow(JSONtext);
            },
            error: function() {
              if (/^file\:/.test(location.href)) {
                alert('In Chrome, file:/// URLs cannot use XHR\nStart the browser with --allow-file-access-from-files as command line flag to use it anyway');
              } else {
                alert('The language file for language ' + language + " can't be found. An empty file will be loaded instead");
              }
              continueBelow();
            }
          });
        } else {
          var JSONtext;
          try {
            JSONtext = JSON.parse($("#languagecode").val());
          } catch(ex) {
            alert('Invalid input');
          }
          if (JSONtext) {
            continueBelow(JSONtext);
          }
        }
      });

      var continueBelow = function(current) {
        current = current || {};
        if (!English || !Object.keys(English).length) {
          alert('The English translation file could not be loaded, but is required to be loaded. Please reload this page to try again');
          return;
        }
        $("#exportArea").css("display", "block");
        $("#languageselector").css("display", "none");

        var target = $("#translateArea");
        target.append(
          $('<input type="checkbox" id="hideTranslated" />').change(function() {
            if ($(this).is(":checked")) {
              $("#translateArea p").css("display", "none");
              $("#translateArea textarea").each(function() {
                if (!$(this).val()) {
                  $(this).parent("p").css("display", "block");
                }
              });
              $("#translateArea textarea ~ textarea[data-messageforid]").each(function() {
                if (/\s/.test($(this).val().trim()) && $(this).val() === $(this).prevAll('textarea')[0].value) { // Smart guess
                  $(this).parent("p").css("display", "block");
                }
              });
            } else {
              $("#translateArea p").css("display", "block");
            }
          })
        ).append(
          $('<label for="hideTranslated">').text("Hide translated messages")
        );

        var IDs = Object.keys(English).sort();
        for (i=0; i<IDs.length; i++) {
          var id = IDs[i];
          var p = $("<p>");
          p.append(
            $('<b>').text(id).attr('id', '__' + id)
          );
          p.append($("<br>"));
          p.append('<span indent="1">English message:</span>');
          p.append(
            $("<textarea disabled='disabled'>").val(English[id].message)
          );
          p.append($("<br>"));
          p.append('<span indent="1">Translation:</span>');
          p.append(
            $("<textarea placeholder='Enter translation here'>").
                  val(current[id]?current[id].message:'').
                  attr('data-messageForId', id)
          );
          p.append($("<br>"));
          p.append('<span indent="1">Information:</span>');
          p.append(
            $("<i>").text(English[id].description)
          );
          if (English[id].placeholders) {
            p.append($("<br>"));
            p.append('<span indent="1">Placeholder' + (Object.keys(English[id].placeholders).length !== 1 ? 's' : '') + ':</span>');
            var ph;
            for (ph in English[id].placeholders) {
              p.append($("<br>"));
              p.append(
                $('<u indent="2">').text('$' + ph + '$')
              );
              p.append($("<br>"));
              p.append('<span indent="3">English message:</span>');
              p.append(
                $("<textarea disabled='disabled'>").val(English[id].placeholders[ph].content)
              );
              p.append($("<br>"));
              p.append('<span indent="3">Translation:</span>');
              p.append(
                $("<textarea cols='100' rows='2' placeholder='Enter translation here'>").
                      val(current[id] && current[id].placeholders && current[id].placeholders[ph]?current[id].placeholders[ph].content:'').
                      attr('data-placeholderForID', id).
                      attr('data-placeholder', ph)
              );
              p.append($("<br>"));
              p.append('<span indent="3">Example:</span>');
              p.append(
                $("<i>").text(English[id].placeholders[ph].example)
              );
            }
          }
          target.append(p);
        }
        
        $("textarea").bind("input", function() {
          $("#exportArea :not(input)").remove();
        });
      };

      $("#exportButton").click(function() {
        var translation = {};
        var IDs = Object.keys(English).sort();
        for (i=0; i<IDs.length; i++) {
          translation[IDs[i]] = English[IDs[i]];
        }
        for (id in translation) {
          var somethingIsEmpty = false;
          translation[id].message = $("textarea[data-messageForId='" + id + "']").val().trim();
          if (translation[id].message === "") {
            somethingIsEmpty = true;
          }
          $("textarea[data-placeholderForID='" + id + "']").each(function() {
            translation[id].placeholders[$(this).attr("data-placeholder")].content = $(this).val().trim();
            if ($(this).val().trim() === "") {
              somethingIsEmpty = true;
            }
          });
          $("#exportArea :not(input)").remove();
          if (somethingIsEmpty) {
            delete translation[id];
          } else if (!doILikeThisMessage(translation[id])) {
            $("#hideTranslated:checked").click().change();
            location.hash = '__' + id;
            return;
          }
        }

        $("#exportArea").append(
          $("<a download='messages.json' title='download'>").text("Download").attr('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(translation, undefined, 2)))
        ).append(
          $("<br/>")
        ).append(
          $("<span>").text("Save this file to your local computer and then attach it to the issue for your language in the issue tracker. After that, we'll take care of it.")
        );
      });

      var doILikeThisMessage = function(entry) {
        /* THIS DOES NOT MAKE THE EXECUTABLE REDUNDANT, THESE ARE JUST VERY BASIC CHECKS! */
        var match = entry.message.replace(/\$\$/g, '===').match(/\$[\w]+\$/g),
         tmp = entry.message.replace(/\$\$/g, '==='), i;
        if (match) {
          if (!entry.placeholders) {
            alert('Placeholder ' + match[0] + ' does not exist');
            return false;
          }
          for (i=0; i<match.length; i++) {
            if (!entry.placeholders[match[i].substr(1, match[i].length-2)]) {
              alert('Placeholder ' + match[i] + ' does not exist');
              return false;
            }
          }
          tmp = tmp.replace(match, '');
        } else if (entry.placeholders) {
          alert('Placeholders were not used in the message');
          return false;
        }

        if (entry.placeholders) {
          for (i in entry.placeholders) {
            tmp += '===' + entry.placeholders[i].content;
          }
        }
        match = tmp.match(/\$[1-9]/g);
        if (match) {
          var found = [], lastfound=1;
          for (i=0; i<match.length; i++) {
            found.push(match[i].substr(1));
          }
          found.sort();
          for (i=0; i<found.length; i++) {
            if (Number(found[i]) !== lastfound && Number(found[i]) !== lastfound +1) {
              alert("Numerical placeholder $" + (lastfound+1) + " not found");
              return false;
            }
          }
        }

        if ((/\&gt\;/.test(tmp) || /\&\#0*60\;/.test(tmp)) && ((/\&lt\;/.test(tmp) || /\&\#0*62\;/.test(tmp)))) {
          alert('Escaped HTML code found');
          return false;
        }

        return true;
      };
    </script>
  </body>
</html>